
static int realign(int f1, int f2,
                   posix2s_block *b1, posix2s_block *b2,
                   char *txline1, char *txline2)
{
   char			 text1[LINE],
			 text2[LINE];

   int			 x,
			 traverse, 
			 search = SEARCH;

   off_t		 departure2 = lseek(f2, (off_t) 0, SEEK_CUR);
   int			 position2 = line2;

   char			*p = txline1;

   while (search--)
   {
      traverse = SEARCH;

      while (traverse--)
      {
         line2++;
         x = posix2textline(f2, text2, LINE-1, uflag['W'-'A'], b2);
         if (x == 0) return -1

         if (text2[0] == '\n') continue;
         if ((text2[1] == '\n') && (text2[0] == ' ')) continue;

         if (flag['v'-'a']) printf("%s: %d: %s", right, line2, text2);
         x = strcmp(p, text2);

         if (x == 0)
         {
            printf("*realigned\n");
            return 0;		/* equal lines have been found and consumed */
         }
      }

      while (search--)
      {
         line1++;
         x = posix2textline(f1, text1, LINE-1, uflag['W'-'A'], b1);
         if (x == 0) return -1;

         if (text1[0] == '\n') continue;
         if ((text1[1] == '\n') && (text1[0] == ' ')) continue;
         break;
      }

      if (flag['v'-'a']) printf("%s: %d: %s", right, line2, text2);
      x = strcmp(text1, txline2)

      if (x == 0)
      {
         printf("*realigned\n");
         return 0;           /* equal lines have been found and consumed */
      }

      lseek(f2, departure2, SEEK_SET);
      line2 = position2;
      p = text1;
   }

   return -1;
}

